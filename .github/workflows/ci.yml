name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Install platform-specific dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pip install -e ".[spout]"
      continue-on-error: true

    - name: Install platform-specific dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        pip install -e ".[syphon]"
      continue-on-error: true

    - name: Lint with ruff
      run: |
        ruff check src tests
        ruff format --check src tests

    - name: Type check with mypy
      run: |
        mypy src/virtual_gpu_lut_box

    - name: Test with pytest
      run: |
        pytest --cov=virtual_gpu_lut_box --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-install:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Install from wheel
      run: |
        python -m pip install --upgrade pip
        pip install dist/*.whl

    - name: Test CLI installation
      run: |
        virtual-gpu-lut-box --version
        virtual-gpu-lut-box info

    - name: Test package import
      run: |
        python -c "from virtual_gpu_lut_box import LUTGenerator, HaldConverter, StreamingFactory; print('Import successful')"

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        pip install -e ".[dev]"
        safety check

    - name: Run bandit security check
      run: |
        bandit -r src/virtual_gpu_lut_box

  docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Generate documentation
      run: |
        mkdir -p docs
        python -c "
        from virtual_gpu_lut_box import LUTGenerator, HaldConverter, StreamingFactory
        import inspect

        # Generate basic API documentation
        with open('docs/api.md', 'w') as f:
            f.write('# API Documentation\n\n')

            classes = [LUTGenerator, HaldConverter, StreamingFactory]
            for cls in classes:
                f.write(f'## {cls.__name__}\n\n')
                f.write(f'{cls.__doc__ or \"No documentation available.\"}\n\n')

                for name, method in inspect.getmembers(cls, predicate=inspect.ismethod):
                    if not name.startswith('_'):
                        f.write(f'### {name}\n\n')
                        f.write(f'{method.__doc__ or \"No documentation available.\"}\n\n')
        "

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: docs
        path: docs/
